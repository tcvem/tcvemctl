// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/tcvem/backend/pkg/pb/certificate.proto

// Generated with protoc-gen-gorm version: v0.17.0
// Anticipating compatibility with atlas-app-toolkit version: v0.18.0

package pb

import context "context"
import time "time"

import errors1 "github.com/infobloxopen/protoc-gen-gorm/errors"
import field_mask1 "google.golang.org/genproto/protobuf/field_mask"
import gorm1 "github.com/jinzhu/gorm"
import gorm2 "github.com/infobloxopen/atlas-app-toolkit/gorm"
import ptypes1 "github.com/golang/protobuf/ptypes"
import resource1 "github.com/infobloxopen/atlas-app-toolkit/gorm/resource"

import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"
import _ "github.com/infobloxopen/atlas-app-toolkit/rpc/resource"

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = math.Inf

type CertficateORM struct {
	CreatedAt *time.Time
	DeletedAt *time.Time
	Host      string
	Id        string `gorm:"type:uuid;primary_key"`
	Name      string
	Notes     string
	Port      string
	UpdatedAt *time.Time
}

// TableName overrides the default tablename generated by GORM
func (CertficateORM) TableName() string {
	return "certficates"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Certficate) ToORM(ctx context.Context) (CertficateORM, error) {
	to := CertficateORM{}
	var err error
	if prehook, ok := interface{}(m).(CertficateWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	if v, err := resource1.Decode(&Certficate{}, m.Id); err != nil {
		return to, err
	} else if v != nil {
		to.Id = v.(string)
	}
	if m.CreatedAt != nil {
		var t time.Time
		if t, err = ptypes1.Timestamp(m.CreatedAt); err != nil {
			return to, err
		}
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		var t time.Time
		if t, err = ptypes1.Timestamp(m.UpdatedAt); err != nil {
			return to, err
		}
		to.UpdatedAt = &t
	}
	if m.DeletedAt != nil {
		var t time.Time
		if t, err = ptypes1.Timestamp(m.DeletedAt); err != nil {
			return to, err
		}
		to.DeletedAt = &t
	}
	to.Name = m.Name
	to.Host = m.Host
	to.Port = m.Port
	to.Notes = m.Notes
	if posthook, ok := interface{}(m).(CertficateWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *CertficateORM) ToPB(ctx context.Context) (Certficate, error) {
	to := Certficate{}
	var err error
	if prehook, ok := interface{}(m).(CertficateWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	if v, err := resource1.Encode(&Certficate{}, m.Id); err != nil {
		return to, err
	} else {
		to.Id = v
	}
	if m.CreatedAt != nil {
		if to.CreatedAt, err = ptypes1.TimestampProto(*m.CreatedAt); err != nil {
			return to, err
		}
	}
	if m.UpdatedAt != nil {
		if to.UpdatedAt, err = ptypes1.TimestampProto(*m.UpdatedAt); err != nil {
			return to, err
		}
	}
	if m.DeletedAt != nil {
		if to.DeletedAt, err = ptypes1.TimestampProto(*m.DeletedAt); err != nil {
			return to, err
		}
	}
	to.Name = m.Name
	to.Host = m.Host
	to.Port = m.Port
	to.Notes = m.Notes
	if posthook, ok := interface{}(m).(CertficateWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Certficate the arg will be the target, the caller the one being converted from

// CertficateBeforeToORM called before default ToORM code
type CertficateWithBeforeToORM interface {
	BeforeToORM(context.Context, *CertficateORM) error
}

// CertficateAfterToORM called after default ToORM code
type CertficateWithAfterToORM interface {
	AfterToORM(context.Context, *CertficateORM) error
}

// CertficateBeforeToPB called before default ToPB code
type CertficateWithBeforeToPB interface {
	BeforeToPB(context.Context, *Certficate) error
}

// CertficateAfterToPB called after default ToPB code
type CertficateWithAfterToPB interface {
	AfterToPB(context.Context, *Certficate) error
}

// DefaultCreateCertficate executes a basic gorm create call
func DefaultCreateCertficate(ctx context.Context, in *Certficate, db *gorm1.DB) (*Certficate, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CertficateORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CertficateORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type CertficateORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type CertficateORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm1.DB) error
}

// DefaultReadCertficate executes a basic gorm read call
func DefaultReadCertficate(ctx context.Context, in *Certficate, db *gorm1.DB) (*Certficate, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == "" {
		return nil, errors1.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(CertficateORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm2.ApplyFieldSelection(ctx, db, nil, &CertficateORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CertficateORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := CertficateORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(CertficateORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type CertficateORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type CertficateORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type CertficateORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm1.DB) error
}

func DefaultDeleteCertficate(ctx context.Context, in *Certficate, db *gorm1.DB) error {
	if in == nil {
		return errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == "" {
		return errors1.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(CertficateORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&CertficateORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(CertficateORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type CertficateORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type CertficateORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm1.DB) error
}

func DefaultDeleteCertficateSet(ctx context.Context, in []*Certficate, db *gorm1.DB) error {
	if in == nil {
		return errors1.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == "" {
			return errors1.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&CertficateORM{})).(CertficateORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&CertficateORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&CertficateORM{})).(CertficateORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type CertficateORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Certficate, *gorm1.DB) (*gorm1.DB, error)
}
type CertficateORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Certficate, *gorm1.DB) error
}

// DefaultStrictUpdateCertficate clears first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateCertficate(ctx context.Context, in *Certficate, db *gorm1.DB) (*Certficate, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateCertficate")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &CertficateORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(CertficateORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(CertficateORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CertficateORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type CertficateORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type CertficateORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type CertficateORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm1.DB) error
}

// DefaultPatchCertficate executes a basic gorm update call with patch behavior
func DefaultPatchCertficate(ctx context.Context, in *Certficate, updateMask *field_mask1.FieldMask, db *gorm1.DB) (*Certficate, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	var pbObj Certficate
	var err error
	if hook, ok := interface{}(&pbObj).(CertficateWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadCertficate(ctx, &Certficate{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(CertficateWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskCertficate(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(CertficateWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateCertficate(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(CertficateWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type CertficateWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Certficate, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type CertficateWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Certficate, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type CertficateWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Certficate, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type CertficateWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Certficate, *field_mask1.FieldMask, *gorm1.DB) error
}

// DefaultApplyFieldMaskCertficate patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskCertficate(ctx context.Context, patchee *Certficate, patcher *Certficate, updateMask *field_mask1.FieldMask, prefix string, db *gorm1.DB) (*Certficate, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors1.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"CreatedAt" {
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if f == prefix+"UpdatedAt" {
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
		if f == prefix+"DeletedAt" {
			patchee.DeletedAt = patcher.DeletedAt
			continue
		}
		if f == prefix+"Name" {
			patchee.Name = patcher.Name
			continue
		}
		if f == prefix+"Host" {
			patchee.Host = patcher.Host
			continue
		}
		if f == prefix+"Port" {
			patchee.Port = patcher.Port
			continue
		}
		if f == prefix+"Notes" {
			patchee.Notes = patcher.Notes
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListCertficate executes a gorm list call
func DefaultListCertficate(ctx context.Context, db *gorm1.DB) ([]*Certficate, error) {
	in := Certficate{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CertficateORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm2.ApplyCollectionOperators(ctx, db, &CertficateORM{}, &Certficate{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CertficateORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []CertficateORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CertficateORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Certficate{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type CertficateORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type CertficateORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type CertficateORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm1.DB, *[]CertficateORM) error
}
type CertificateServiceDefaultServer struct {
	DB *gorm1.DB
}

// Create ...
func (m *CertificateServiceDefaultServer) Create(ctx context.Context, in *CreateCertficateRequest) (*CreateCertficateResponse, error) {
	db := m.DB
	if custom, ok := interface{}(in).(CertificateServiceCertficateWithBeforeCreate); ok {
		var err error
		if db, err = custom.BeforeCreate(ctx, db); err != nil {
			return nil, err
		}
	}
	res, err := DefaultCreateCertficate(ctx, in.GetPayload(), db)
	if err != nil {
		return nil, err
	}
	out := &CreateCertficateResponse{Result: res}
	if custom, ok := interface{}(in).(CertificateServiceCertficateWithAfterCreate); ok {
		var err error
		if err = custom.AfterCreate(ctx, out, db); err != nil {
			return nil, err
		}
	}
	return out, nil
}

// CertificateServiceCertficateWithBeforeCreate called before DefaultCreateCertficate in the default Create handler
type CertificateServiceCertficateWithBeforeCreate interface {
	BeforeCreate(context.Context, *gorm1.DB) (*gorm1.DB, error)
}

// CertificateServiceCertficateWithAfterCreate called before DefaultCreateCertficate in the default Create handler
type CertificateServiceCertficateWithAfterCreate interface {
	AfterCreate(context.Context, *CreateCertficateResponse, *gorm1.DB) error
}

// Read ...
func (m *CertificateServiceDefaultServer) Read(ctx context.Context, in *ReadCertficateRequest) (*ReadCertficateResponse, error) {
	db := m.DB
	if custom, ok := interface{}(in).(CertificateServiceCertficateWithBeforeRead); ok {
		var err error
		if db, err = custom.BeforeRead(ctx, db); err != nil {
			return nil, err
		}
	}
	res, err := DefaultReadCertficate(ctx, &Certficate{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	out := &ReadCertficateResponse{Result: res}
	if custom, ok := interface{}(in).(CertificateServiceCertficateWithAfterRead); ok {
		var err error
		if err = custom.AfterRead(ctx, out, db); err != nil {
			return nil, err
		}
	}
	return out, nil
}

// CertificateServiceCertficateWithBeforeRead called before DefaultReadCertficate in the default Read handler
type CertificateServiceCertficateWithBeforeRead interface {
	BeforeRead(context.Context, *gorm1.DB) (*gorm1.DB, error)
}

// CertificateServiceCertficateWithAfterRead called before DefaultReadCertficate in the default Read handler
type CertificateServiceCertficateWithAfterRead interface {
	AfterRead(context.Context, *ReadCertficateResponse, *gorm1.DB) error
}

// Update ...
func (m *CertificateServiceDefaultServer) Update(ctx context.Context, in *UpdateCertficateRequest) (*UpdateCertficateResponse, error) {
	var err error
	var res *Certficate
	db := m.DB
	if custom, ok := interface{}(in).(CertificateServiceCertficateWithBeforeUpdate); ok {
		var err error
		if db, err = custom.BeforeUpdate(ctx, db); err != nil {
			return nil, err
		}
	}
	res, err = DefaultStrictUpdateCertficate(ctx, in.GetPayload(), db)
	if err != nil {
		return nil, err
	}
	out := &UpdateCertficateResponse{Result: res}
	if custom, ok := interface{}(in).(CertificateServiceCertficateWithAfterUpdate); ok {
		var err error
		if err = custom.AfterUpdate(ctx, out, db); err != nil {
			return nil, err
		}
	}
	return out, nil
}

// CertificateServiceCertficateWithBeforeUpdate called before DefaultUpdateCertficate in the default Update handler
type CertificateServiceCertficateWithBeforeUpdate interface {
	BeforeUpdate(context.Context, *gorm1.DB) (*gorm1.DB, error)
}

// CertificateServiceCertficateWithAfterUpdate called before DefaultUpdateCertficate in the default Update handler
type CertificateServiceCertficateWithAfterUpdate interface {
	AfterUpdate(context.Context, *UpdateCertficateResponse, *gorm1.DB) error
}

// List ...
func (m *CertificateServiceDefaultServer) List(ctx context.Context, in *ListCertficateRequest) (*ListCertficateResponse, error) {
	db := m.DB
	if custom, ok := interface{}(in).(CertificateServiceCertficateWithBeforeList); ok {
		var err error
		if db, err = custom.BeforeList(ctx, db); err != nil {
			return nil, err
		}
	}
	res, err := DefaultListCertficate(ctx, db)
	if err != nil {
		return nil, err
	}
	out := &ListCertficateResponse{Results: res}
	if custom, ok := interface{}(in).(CertificateServiceCertficateWithAfterList); ok {
		var err error
		if err = custom.AfterList(ctx, out, db); err != nil {
			return nil, err
		}
	}
	return out, nil
}

// CertificateServiceCertficateWithBeforeList called before DefaultListCertficate in the default List handler
type CertificateServiceCertficateWithBeforeList interface {
	BeforeList(context.Context, *gorm1.DB) (*gorm1.DB, error)
}

// CertificateServiceCertficateWithAfterList called before DefaultListCertficate in the default List handler
type CertificateServiceCertficateWithAfterList interface {
	AfterList(context.Context, *ListCertficateResponse, *gorm1.DB) error
}

// Delete ...
func (m *CertificateServiceDefaultServer) Delete(ctx context.Context, in *DeleteCertficateRequest) (*DeleteCertficateResponse, error) {
	db := m.DB
	if custom, ok := interface{}(in).(CertificateServiceCertficateWithBeforeDelete); ok {
		var err error
		if db, err = custom.BeforeDelete(ctx, db); err != nil {
			return nil, err
		}
	}
	err := DefaultDeleteCertficate(ctx, &Certficate{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	out := &DeleteCertficateResponse{}
	if custom, ok := interface{}(in).(CertificateServiceCertficateWithAfterDelete); ok {
		var err error
		if err = custom.AfterDelete(ctx, out, db); err != nil {
			return nil, err
		}
	}
	return out, nil
}

// CertificateServiceCertficateWithBeforeDelete called before DefaultDeleteCertficate in the default Delete handler
type CertificateServiceCertficateWithBeforeDelete interface {
	BeforeDelete(context.Context, *gorm1.DB) (*gorm1.DB, error)
}

// CertificateServiceCertficateWithAfterDelete called before DefaultDeleteCertficate in the default Delete handler
type CertificateServiceCertficateWithAfterDelete interface {
	AfterDelete(context.Context, *DeleteCertficateResponse, *gorm1.DB) error
}
