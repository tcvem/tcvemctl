// Code generated by protoc-gen-validate
// source: github.com/tcvem/backend/pkg/pb/certificate.proto
// DO NOT EDIT!!!

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on Certficate with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Certficate) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CertficateValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CertficateValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CertficateValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CertficateValidationError{
				field:  "DeletedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Host

	// no validation rules for Port

	// no validation rules for Notes

	return nil
}

// CertficateValidationError is the validation error returned by
// Certficate.Validate if the designated constraints aren't met.
type CertficateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CertficateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CertficateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CertficateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CertficateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CertficateValidationError) ErrorName() string { return "CertficateValidationError" }

// Error satisfies the builtin error interface
func (e CertficateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCertficate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CertficateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CertficateValidationError{}

// Validate checks the field values on CreateCertficateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateCertficateRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCertficateRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateCertficateRequestValidationError is the validation error returned by
// CreateCertficateRequest.Validate if the designated constraints aren't met.
type CreateCertficateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCertficateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCertficateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCertficateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCertficateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCertficateRequestValidationError) ErrorName() string {
	return "CreateCertficateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCertficateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCertficateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCertficateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCertficateRequestValidationError{}

// Validate checks the field values on CreateCertficateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateCertficateResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCertficateResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateCertficateResponseValidationError is the validation error returned by
// CreateCertficateResponse.Validate if the designated constraints aren't met.
type CreateCertficateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCertficateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCertficateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCertficateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCertficateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCertficateResponseValidationError) ErrorName() string {
	return "CreateCertficateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCertficateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCertficateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCertficateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCertficateResponseValidationError{}

// Validate checks the field values on ReadCertficateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadCertficateRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadCertficateRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadCertficateRequestValidationError is the validation error returned by
// ReadCertficateRequest.Validate if the designated constraints aren't met.
type ReadCertficateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadCertficateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadCertficateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadCertficateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadCertficateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadCertficateRequestValidationError) ErrorName() string {
	return "ReadCertficateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadCertficateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadCertficateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadCertficateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadCertficateRequestValidationError{}

// Validate checks the field values on ReadCertficateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadCertficateResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadCertficateResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadCertficateResponseValidationError is the validation error returned by
// ReadCertficateResponse.Validate if the designated constraints aren't met.
type ReadCertficateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadCertficateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadCertficateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadCertficateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadCertficateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadCertficateResponseValidationError) ErrorName() string {
	return "ReadCertficateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadCertficateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadCertficateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadCertficateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadCertficateResponseValidationError{}

// Validate checks the field values on UpdateCertficateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateCertficateRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCertficateRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateCertficateRequestValidationError is the validation error returned by
// UpdateCertficateRequest.Validate if the designated constraints aren't met.
type UpdateCertficateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCertficateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCertficateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCertficateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCertficateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCertficateRequestValidationError) ErrorName() string {
	return "UpdateCertficateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCertficateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCertficateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCertficateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCertficateRequestValidationError{}

// Validate checks the field values on UpdateCertficateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateCertficateResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCertficateResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateCertficateResponseValidationError is the validation error returned by
// UpdateCertficateResponse.Validate if the designated constraints aren't met.
type UpdateCertficateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCertficateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCertficateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCertficateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCertficateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCertficateResponseValidationError) ErrorName() string {
	return "UpdateCertficateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCertficateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCertficateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCertficateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCertficateResponseValidationError{}

// Validate checks the field values on DeleteCertficateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteCertficateRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteCertficateRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteCertficateRequestValidationError is the validation error returned by
// DeleteCertficateRequest.Validate if the designated constraints aren't met.
type DeleteCertficateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCertficateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCertficateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCertficateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCertficateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCertficateRequestValidationError) ErrorName() string {
	return "DeleteCertficateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCertficateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCertficateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCertficateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCertficateRequestValidationError{}

// Validate checks the field values on DeleteCertficateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteCertficateResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteCertficateResponseValidationError is the validation error returned by
// DeleteCertficateResponse.Validate if the designated constraints aren't met.
type DeleteCertficateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCertficateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCertficateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCertficateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCertficateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCertficateResponseValidationError) ErrorName() string {
	return "DeleteCertficateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCertficateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCertficateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCertficateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCertficateResponseValidationError{}

// Validate checks the field values on ListCertficateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCertficateRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListCertficateRequestValidationError is the validation error returned by
// ListCertficateRequest.Validate if the designated constraints aren't met.
type ListCertficateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCertficateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCertficateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCertficateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCertficateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCertficateRequestValidationError) ErrorName() string {
	return "ListCertficateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCertficateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCertficateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCertficateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCertficateRequestValidationError{}

// Validate checks the field values on ListCertficateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCertficateResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCertficateResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListCertficateResponseValidationError is the validation error returned by
// ListCertficateResponse.Validate if the designated constraints aren't met.
type ListCertficateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCertficateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCertficateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCertficateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCertficateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCertficateResponseValidationError) ErrorName() string {
	return "ListCertficateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCertficateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCertficateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCertficateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCertficateResponseValidationError{}
